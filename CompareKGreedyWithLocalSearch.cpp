//
// This program compare the k-greedy algorithm (O(kn) runtime) with the local search algorithm (O(k^7 n^2) runtime ) developed by YUVAL FILMUS† AND JUSTIN WARD‡
//


#include "Function.h"
#include "kGreedy.h"
#include "LocalSearch.h"

#include "InfluenceFunction.h"
#include "CoverFunction.h"
#include "ReachabilityFunction.h"

#include "AssignGroups.h"
#include <ctime>    // For time()
#include <chrono>
#include <iostream>
#include <fstream>
#include <cassert>

void printSeedSet(vector<int> seedSet, ofstream& log);

int main()
{
//constants
    const int NUM_RUNS = 5;
    const string INFLUENCE_FUNCTION = "Influence Function";
    const string COVER_FUNCTION = "Cover Function";
    const string REACHABILITY_FUNCTION = "Reachability Function";
    const string RANDOM_STARTEGY = "Random";
    const string SCREEN_INFLUENCERS = "Screen Influencers";


    //parameters
    string graphName = "CA-GrQcSim.txt";
    string graphPath =  "/home/me/RepresentativeSubmodularMaximization/graphs/";
    double percent = 0.01;
    int numOfGroups = 2;
    string outputPath = "/home/me/Desktop/logger.txt";

    string groupStrategy = RANDOM_STARTEGY;
//    string groupStrategy = SCREEN_INFLUENCERS;

    string functionName = COVER_FUNCTION;
    CoverFunction f(graphPath + graphName);



//================================Actual Experiements========================================================
    int groundSetSize = f.getGroundSetSize();  // need to change this to graph size
    AssignGroups assignGroups(groundSetSize, numOfGroups, f);

    for (int j = 0; j < NUM_RUNS; j++) {

        //logging purpose
        ofstream logbook;
        logbook.open(outputPath, fstream::app);
        auto start = std::chrono::system_clock::now();
        std::time_t start_time = std::chrono::system_clock::to_time_t(start);
        logbook << std::ctime(&start_time);
        logbook << "graph name: " << graphName << endl;
        logbook << "n = " << f.getGroundSetSize() << endl;


        //assign the groups
        vector<vector<int>> groups;
        if (groupStrategy == RANDOM_STARTEGY) {
            groups = assignGroups.assignGroupsRandomly();
            logbook << numOfGroups << " groups are generated by " << "randomly assign each node to a group" << endl;
        } else if (groupStrategy == SCREEN_INFLUENCERS) {
            groups = assignGroups.assignGroupsAccordingToMarginalGainWithRespectToEmaxForInfluenceFunction(numOfGroups,percent);
            logbook << numOfGroups << " are generated by putting e_max in G0, all v with f(v|e_max) > f(e_max) * "
                    << percent << " in G0, and rest of nodes randomly" << endl;
        }

        for (int i = 0; i < groups.size(); i++)
            logbook << "group[" << i << "].size() = " << groups[i].size() << ", ";
        logbook << endl;


        assert (groups.size() == numOfGroups);   //check if there are empty groups generated
        logbook << "Compare k-greedy algorithm with Local Search algorithm using " << functionName << endl;

        kGreedy kgreedy(f, groups, numOfGroups);
        double functionValueOfX;
        clock_t startTime1 = clock(); //using <ctime> library
        vector<int> X;
        if (functionName == INFLUENCE_FUNCTION) {
            X = kgreedy.kGreedyAlgorithmForInfluenceFunction(functionValueOfX);
        } else if (functionName == COVER_FUNCTION) {
            X = kgreedy.kGreedyAlgorithmForCoverFunction(functionValueOfX);
        } else if (functionName == REACHABILITY_FUNCTION) {
            X = kgreedy.kGreedyAlgorithmForReachabilityFunction(functionValueOfX);
        }
        clock_t endTime1 = clock();
        double timeFindingSeedSetX = double(endTime1 - startTime1) / CLOCKS_PER_SEC; //unit is seconds
        logbook << "Time to find the best seed set for k-greedy algorithm: " << timeFindingSeedSetX << " seconds."
                << endl;
        cout << "seed set for k-greedy algorithm found" << endl;
        logbook << "f(k-greedy algorithm seed set X) = " << functionValueOfX << "with X = ";
        printSeedSet(X, logbook);
        logbook << "--------------------------------------------------------------------------------------" << endl;



        LocalSearch localSearch(f, groups, numOfGroups);
        double functionValueOfU;
        clock_t startTimeLocalSearch = clock(); //using <ctime> library
        vector<int> U = localSearch.LocalSearchAlgorithm(functionValueOfU, logbook);
        clock_t endTimeLocalSearch = clock();
        double timeFindingSeedSetU = double(endTimeLocalSearch - startTimeLocalSearch) / CLOCKS_PER_SEC; //unit is seconds
        logbook << "Time to find the best seed set for local search algorithm: " << timeFindingSeedSetU << " seconds."
                << endl;
        cout << "seed set for local search algorithm found" << endl;
        logbook << "f(Local Search algorithm seed set U) = " << functionValueOfU << "with U = ";
        printSeedSet(U, logbook);
        logbook << "--------------------------------------------------------------------------------------" << endl;
        logbook << "======================================================================================" << endl<< endl;
    }
}


void printSeedSet(vector<int> seedSet, ofstream& log)
{
    log << "Seed set size: " << seedSet.size() << endl;
    log << "Seed Nodes: ";
    for(int ele : seedSet){
        log << ele << ", ";
    }
    log << endl;
}

